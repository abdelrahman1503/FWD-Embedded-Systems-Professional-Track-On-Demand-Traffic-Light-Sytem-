
traffic light sys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d60  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000820  00000000  00000000  00001c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000999  00000000  00000000  00002a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 13 01 	call	0x226	; 0x226 <main>
  74:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
#include "app.h"
#include <avr/interrupt.h>
void APP_init(void)
{
	//initializing pin 2 in port D to input
	DIO_init(2, 'D', IN);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	64 e4       	ldi	r22, 0x44	; 68
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	//initializing all pin 0,1,2 in port A, port B to output
	DIO_init(0, 'A', OUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	61 e4       	ldi	r22, 0x41	; 65
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	DIO_init(1, 'A', OUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	61 e4       	ldi	r22, 0x41	; 65
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	DIO_init(2, 'A', OUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	61 e4       	ldi	r22, 0x41	; 65
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	DIO_init(0, 'B', OUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	62 e4       	ldi	r22, 0x42	; 66
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	DIO_init(1, 'B', OUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e4       	ldi	r22, 0x42	; 66
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
	DIO_init(2, 'B', OUT);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	62 e4       	ldi	r22, 0x42	; 66
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 84 01 	call	0x308	; 0x308 <DIO_init>
  c2:	08 95       	ret

000000c4 <APP_start>:
{
	//Two variables used as counters for timer
	unsigned int overflow = 0;
	unsigned int counter = 0;
	//enable global interrupt
	sei();
  c4:	78 94       	sei
	// set interrupt sense to raising edge
	MCUCR |= (1<<ISC00) | (1<<ISC01);
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	//enable external interrupt
	GICR |= (1<<INT0);
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59
	TCCR0 = 0x00; //Normal Mode
  d2:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; //set initial value to 0
  d4:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<0); //no prescalar
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	83 bf       	out	0x33, r24	; 51
	while (1)
	{
		//Cars red led and pedestrian green led are initially on
		LED_on('A', 0);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_on>
		LED_on('B', 2);
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_on>
		//Using the timer to delay 5 seconds
		while (overflow < 19532)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 c0       	rjmp	.+16     	; 0x102 <APP_start+0x3e>
		{
			while ((TIFR & (1<<0)) == 0);
  f2:	08 b6       	in	r0, 0x38	; 56
  f4:	00 fe       	sbrs	r0, 0
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <APP_start+0x2e>
			TIFR |= (1<<0);
  f8:	88 b7       	in	r24, 0x38	; 56
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	88 bf       	out	0x38, r24	; 56
			overflow++;
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		//Cars red led and pedestrian green led are initially on
		LED_on('A', 0);
		LED_on('B', 2);
		//Using the timer to delay 5 seconds
		while (overflow < 19532)
 102:	2c 34       	cpi	r18, 0x4C	; 76
 104:	8c e4       	ldi	r24, 0x4C	; 76
 106:	38 07       	cpc	r19, r24
 108:	a0 f3       	brcs	.-24     	; 0xf2 <APP_start+0x2e>
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter to 0
		overflow = 0;
		TCNT0 = 0x00;
 10a:	12 be       	out	0x32, r1	; 50
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		LED_off('B', 2);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
			while ((TIFR & (1<<0)) == 0);
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter to 0
		overflow = 0;
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0 = 0x00;
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
		LED_off('B', 2);
		//Blinking the yellow leds for both
		while (overflow < 20)
 120:	19 c0       	rjmp	.+50     	; 0x154 <APP_start+0x90>
		{	
				
				LED_toggle('A', 1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
				LED_toggle('B', 1);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e4       	ldi	r24, 0x42	; 66
 12e:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
			while (counter < 1000)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <APP_start+0x84>
			{
				while ((TIFR & (1<<0)) == 0);
 138:	08 b6       	in	r0, 0x38	; 56
 13a:	00 fe       	sbrs	r0, 0
 13c:	fd cf       	rjmp	.-6      	; 0x138 <APP_start+0x74>
				TIFR |= (1<<0);
 13e:	88 b7       	in	r24, 0x38	; 56
 140:	81 60       	ori	r24, 0x01	; 1
 142:	88 bf       	out	0x38, r24	; 56
				counter++;
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
		while (overflow < 20)
		{	
				
				LED_toggle('A', 1);
				LED_toggle('B', 1);
			while (counter < 1000)
 148:	28 3e       	cpi	r18, 0xE8	; 232
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	38 07       	cpc	r19, r24
 14e:	a0 f3       	brcs	.-24     	; 0x138 <APP_start+0x74>
				while ((TIFR & (1<<0)) == 0);
				TIFR |= (1<<0);
				counter++;
			}
			counter = 0;
			TCNT0 = 0x00;
 150:	12 be       	out	0x32, r1	; 50
			overflow ++;
 152:	21 96       	adiw	r28, 0x01	; 1
		TCNT0 = 0x00;
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
		LED_off('B', 2);
		//Blinking the yellow leds for both
		while (overflow < 20)
 154:	c4 31       	cpi	r28, 0x14	; 20
 156:	d1 05       	cpc	r29, r1
 158:	20 f3       	brcs	.-56     	; 0x122 <APP_start+0x5e>
			counter = 0;
			TCNT0 = 0x00;
			overflow ++;
		}
		overflow = 0;
		TCNT0 = 0x00;
 15a:	12 be       	out	0x32, r1	; 50
		//The yellow leds are off
		LED_off('A', 1);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		LED_off('B', 1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_on>
		LED_on('B', 0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_on>
			}
			counter = 0;
			TCNT0 = 0x00;
			overflow ++;
		}
		overflow = 0;
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
		LED_off('B', 1);
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
		LED_on('B', 0);
		//timer to delay by 5 seconds
		while (overflow < 19532)
 180:	08 c0       	rjmp	.+16     	; 0x192 <APP_start+0xce>
		{
			while ((TIFR & (1<<0)) == 0);
 182:	08 b6       	in	r0, 0x38	; 56
 184:	00 fe       	sbrs	r0, 0
 186:	fd cf       	rjmp	.-6      	; 0x182 <APP_start+0xbe>
			TIFR |= (1<<0);
 188:	88 b7       	in	r24, 0x38	; 56
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	88 bf       	out	0x38, r24	; 56
			overflow++;
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
		LED_off('B', 1);
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
		LED_on('B', 0);
		//timer to delay by 5 seconds
		while (overflow < 19532)
 192:	2c 34       	cpi	r18, 0x4C	; 76
 194:	8c e4       	ldi	r24, 0x4C	; 76
 196:	38 07       	cpc	r19, r24
 198:	a0 f3       	brcs	.-24     	; 0x182 <APP_start+0xbe>
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter and timer
		overflow = 0;
		TCNT0 = 0x00;
 19a:	12 be       	out	0x32, r1	; 50
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		LED_off('B', 0);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
			while ((TIFR & (1<<0)) == 0);
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter and timer
		overflow = 0;
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0 = 0x00;
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
		LED_off('B', 0);
		//Blinking the yellow leds for 5 seconds
		while (overflow < 20)
 1b0:	19 c0       	rjmp	.+50     	; 0x1e4 <APP_start+0x120>
		{
			
			LED_toggle('A', 1);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
			LED_toggle('B', 1);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
			while (counter < 1000)
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <APP_start+0x114>
			{
				while ((TIFR & (1<<0)) == 0);
 1c8:	08 b6       	in	r0, 0x38	; 56
 1ca:	00 fe       	sbrs	r0, 0
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <APP_start+0x104>
				TIFR |= (1<<0);
 1ce:	88 b7       	in	r24, 0x38	; 56
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	88 bf       	out	0x38, r24	; 56
				counter++;
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
		while (overflow < 20)
		{
			
			LED_toggle('A', 1);
			LED_toggle('B', 1);
			while (counter < 1000)
 1d8:	28 3e       	cpi	r18, 0xE8	; 232
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	38 07       	cpc	r19, r24
 1de:	a0 f3       	brcs	.-24     	; 0x1c8 <APP_start+0x104>
				while ((TIFR & (1<<0)) == 0);
				TIFR |= (1<<0);
				counter++;
			}
			counter = 0;
			TCNT0 = 0x00;
 1e0:	12 be       	out	0x32, r1	; 50
			overflow ++;
 1e2:	21 96       	adiw	r28, 0x01	; 1
		TCNT0 = 0x00;
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
		LED_off('B', 0);
		//Blinking the yellow leds for 5 seconds
		while (overflow < 20)
 1e4:	c4 31       	cpi	r28, 0x14	; 20
 1e6:	d1 05       	cpc	r29, r1
 1e8:	20 f3       	brcs	.-56     	; 0x1b2 <APP_start+0xee>
			TCNT0 = 0x00;
			overflow ++;
		}
		//reseting the counter and timer
		overflow = 0;
		TCNT0 = 0x00;
 1ea:	12 be       	out	0x32, r1	; 50
		//Both yellow leds are off
		LED_off('A', 1);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		LED_off('B', 1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	82 e4       	ldi	r24, 0x42	; 66
 1f8:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
		}
 1fc:	6f cf       	rjmp	.-290    	; 0xdc <APP_start+0x18>

000001fe <LED_on>:
 1fe:	98 2f       	mov	r25, r24
 200:	86 2f       	mov	r24, r22
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	69 2f       	mov	r22, r25
 206:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_write>
 20a:	08 95       	ret

0000020c <LED_off>:
 20c:	98 2f       	mov	r25, r24
 20e:	86 2f       	mov	r24, r22
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	69 2f       	mov	r22, r25
 214:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_write>
 218:	08 95       	ret

0000021a <LED_toggle>:
 21a:	98 2f       	mov	r25, r24
 21c:	86 2f       	mov	r24, r22
 21e:	69 2f       	mov	r22, r25
 220:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_toggle>
 224:	08 95       	ret

00000226 <main>:
 226:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
 22a:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_start>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	08 95       	ret

00000234 <__vector_1>:
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	40 e6       	ldi	r20, 0x60	; 96
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	61 e4       	ldi	r22, 0x41	; 65
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_read>
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	91 05       	cpc	r25, r1
 272:	91 f1       	breq	.+100    	; 0x2d8 <__vector_1+0xa4>
 274:	89 2b       	or	r24, r25
 276:	81 f5       	brne	.+96     	; 0x2d8 <__vector_1+0xa4>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e4       	ldi	r24, 0x41	; 65
 27c:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e4       	ldi	r24, 0x41	; 65
 284:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	82 e4       	ldi	r24, 0x42	; 66
 28c:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	0e 94 06 01 	call	0x20c	; 0x20c <LED_off>
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	d0 e0       	ldi	r29, 0x00	; 0
 29c:	19 c0       	rjmp	.+50     	; 0x2d0 <__vector_1+0x9c>
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	82 e4       	ldi	r24, 0x42	; 66
 2aa:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_toggle>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <__vector_1+0x90>
 2b4:	08 b6       	in	r0, 0x38	; 56
 2b6:	00 fe       	sbrs	r0, 0
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <__vector_1+0x80>
 2ba:	88 b7       	in	r24, 0x38	; 56
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	88 bf       	out	0x38, r24	; 56
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	28 3e       	cpi	r18, 0xE8	; 232
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	38 07       	cpc	r19, r24
 2ca:	a4 f3       	brlt	.-24     	; 0x2b4 <__vector_1+0x80>
 2cc:	12 be       	out	0x32, r1	; 50
 2ce:	21 96       	adiw	r28, 0x01	; 1
 2d0:	c4 31       	cpi	r28, 0x14	; 20
 2d2:	d1 05       	cpc	r29, r1
 2d4:	24 f3       	brlt	.-56     	; 0x29e <__vector_1+0x6a>
 2d6:	12 be       	out	0x32, r1	; 50
 2d8:	8b b7       	in	r24, 0x3b	; 59
 2da:	8f 7b       	andi	r24, 0xBF	; 191
 2dc:	8b bf       	out	0x3b, r24	; 59
 2de:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_start>
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <DIO_init>:
 308:	62 34       	cpi	r22, 0x42	; 66
 30a:	59 f1       	breq	.+86     	; 0x362 <DIO_init+0x5a>
 30c:	18 f4       	brcc	.+6      	; 0x314 <DIO_init+0xc>
 30e:	61 34       	cpi	r22, 0x41	; 65
 310:	41 f0       	breq	.+16     	; 0x322 <DIO_init+0x1a>
 312:	08 95       	ret
 314:	63 34       	cpi	r22, 0x43	; 67
 316:	09 f4       	brne	.+2      	; 0x31a <DIO_init+0x12>
 318:	44 c0       	rjmp	.+136    	; 0x3a2 <DIO_init+0x9a>
 31a:	64 34       	cpi	r22, 0x44	; 68
 31c:	09 f4       	brne	.+2      	; 0x320 <DIO_init+0x18>
 31e:	60 c0       	rjmp	.+192    	; 0x3e0 <DIO_init+0xd8>
 320:	08 95       	ret
 322:	41 11       	cpse	r20, r1
 324:	0e c0       	rjmp	.+28     	; 0x342 <DIO_init+0x3a>
 326:	4a b3       	in	r20, 0x1a	; 26
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_init+0x2c>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	8a 95       	dec	r24
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_init+0x28>
 338:	cb 01       	movw	r24, r22
 33a:	80 95       	com	r24
 33c:	84 23       	and	r24, r20
 33e:	8a bb       	out	0x1a, r24	; 26
 340:	08 95       	ret
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <DIO_init+0x40>
 346:	6a c0       	rjmp	.+212    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 348:	4a b3       	in	r20, 0x1a	; 26
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_init+0x4e>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_init+0x4a>
 35a:	cb 01       	movw	r24, r22
 35c:	84 2b       	or	r24, r20
 35e:	8a bb       	out	0x1a, r24	; 26
 360:	08 95       	ret
 362:	41 11       	cpse	r20, r1
 364:	0e c0       	rjmp	.+28     	; 0x382 <DIO_init+0x7a>
 366:	47 b3       	in	r20, 0x17	; 23
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_init+0x6c>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_init+0x68>
 378:	cb 01       	movw	r24, r22
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	87 bb       	out	0x17, r24	; 23
 380:	08 95       	ret
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_init+0x80>
 386:	4a c0       	rjmp	.+148    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 388:	47 b3       	in	r20, 0x17	; 23
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0x8e>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0x8a>
 39a:	cb 01       	movw	r24, r22
 39c:	84 2b       	or	r24, r20
 39e:	87 bb       	out	0x17, r24	; 23
 3a0:	08 95       	ret
 3a2:	41 11       	cpse	r20, r1
 3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <DIO_init+0xba>
 3a6:	44 b3       	in	r20, 0x14	; 20
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	b9 01       	movw	r22, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_init+0xac>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_init+0xa8>
 3b8:	cb 01       	movw	r24, r22
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	84 bb       	out	0x14, r24	; 20
 3c0:	08 95       	ret
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	59 f5       	brne	.+86     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3c6:	44 b3       	in	r20, 0x14	; 20
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0xcc>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0xc8>
 3d8:	cb 01       	movw	r24, r22
 3da:	84 2b       	or	r24, r20
 3dc:	84 bb       	out	0x14, r24	; 20
 3de:	08 95       	ret
 3e0:	41 11       	cpse	r20, r1
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e4:	41 b3       	in	r20, 0x11	; 17
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	b9 01       	movw	r22, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_init+0xea>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_init+0xe6>
 3f6:	cb 01       	movw	r24, r22
 3f8:	80 95       	com	r24
 3fa:	84 23       	and	r24, r20
 3fc:	81 bb       	out	0x11, r24	; 17
 3fe:	08 95       	ret
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	61 f4       	brne	.+24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 404:	41 b3       	in	r20, 0x11	; 17
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	b9 01       	movw	r22, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	cb 01       	movw	r24, r22
 418:	84 2b       	or	r24, r20
 41a:	81 bb       	out	0x11, r24	; 17
 41c:	08 95       	ret

0000041e <DIO_toggle>:
 41e:	62 34       	cpi	r22, 0x42	; 66
 420:	b1 f0       	breq	.+44     	; 0x44e <DIO_toggle+0x30>
 422:	18 f4       	brcc	.+6      	; 0x42a <DIO_toggle+0xc>
 424:	61 34       	cpi	r22, 0x41	; 65
 426:	31 f0       	breq	.+12     	; 0x434 <DIO_toggle+0x16>
 428:	08 95       	ret
 42a:	63 34       	cpi	r22, 0x43	; 67
 42c:	e9 f0       	breq	.+58     	; 0x468 <DIO_toggle+0x4a>
 42e:	64 34       	cpi	r22, 0x44	; 68
 430:	41 f1       	breq	.+80     	; 0x482 <DIO_toggle+0x64>
 432:	08 95       	ret
 434:	4b b3       	in	r20, 0x1b	; 27
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_toggle+0x24>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_toggle+0x20>
 446:	cb 01       	movw	r24, r22
 448:	84 27       	eor	r24, r20
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	08 95       	ret
 44e:	48 b3       	in	r20, 0x18	; 24
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	b9 01       	movw	r22, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_toggle+0x3e>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_toggle+0x3a>
 460:	cb 01       	movw	r24, r22
 462:	84 27       	eor	r24, r20
 464:	88 bb       	out	0x18, r24	; 24
 466:	08 95       	ret
 468:	45 b3       	in	r20, 0x15	; 21
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_toggle+0x58>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_toggle+0x54>
 47a:	cb 01       	movw	r24, r22
 47c:	84 27       	eor	r24, r20
 47e:	85 bb       	out	0x15, r24	; 21
 480:	08 95       	ret
 482:	42 b3       	in	r20, 0x12	; 18
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_toggle+0x72>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_toggle+0x6e>
 494:	cb 01       	movw	r24, r22
 496:	84 27       	eor	r24, r20
 498:	82 bb       	out	0x12, r24	; 18
 49a:	08 95       	ret

0000049c <DIO_write>:
 49c:	62 34       	cpi	r22, 0x42	; 66
 49e:	59 f1       	breq	.+86     	; 0x4f6 <DIO_write+0x5a>
 4a0:	18 f4       	brcc	.+6      	; 0x4a8 <DIO_write+0xc>
 4a2:	61 34       	cpi	r22, 0x41	; 65
 4a4:	41 f0       	breq	.+16     	; 0x4b6 <DIO_write+0x1a>
 4a6:	08 95       	ret
 4a8:	63 34       	cpi	r22, 0x43	; 67
 4aa:	09 f4       	brne	.+2      	; 0x4ae <DIO_write+0x12>
 4ac:	44 c0       	rjmp	.+136    	; 0x536 <DIO_write+0x9a>
 4ae:	64 34       	cpi	r22, 0x44	; 68
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <DIO_write+0x18>
 4b2:	60 c0       	rjmp	.+192    	; 0x574 <DIO_write+0xd8>
 4b4:	08 95       	ret
 4b6:	41 11       	cpse	r20, r1
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <DIO_write+0x3a>
 4ba:	4b b3       	in	r20, 0x1b	; 27
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0x2c>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	8a 95       	dec	r24
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0x28>
 4cc:	cb 01       	movw	r24, r22
 4ce:	80 95       	com	r24
 4d0:	84 23       	and	r24, r20
 4d2:	8b bb       	out	0x1b, r24	; 27
 4d4:	08 95       	ret
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	09 f0       	breq	.+2      	; 0x4dc <DIO_write+0x40>
 4da:	6a c0       	rjmp	.+212    	; 0x5b0 <DIO_write+0x114>
 4dc:	4b b3       	in	r20, 0x1b	; 27
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write+0x4e>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write+0x4a>
 4ee:	cb 01       	movw	r24, r22
 4f0:	84 2b       	or	r24, r20
 4f2:	8b bb       	out	0x1b, r24	; 27
 4f4:	08 95       	ret
 4f6:	41 11       	cpse	r20, r1
 4f8:	0e c0       	rjmp	.+28     	; 0x516 <DIO_write+0x7a>
 4fa:	48 b3       	in	r20, 0x18	; 24
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	b9 01       	movw	r22, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_write+0x6c>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	8a 95       	dec	r24
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_write+0x68>
 50c:	cb 01       	movw	r24, r22
 50e:	80 95       	com	r24
 510:	84 23       	and	r24, r20
 512:	88 bb       	out	0x18, r24	; 24
 514:	08 95       	ret
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <DIO_write+0x80>
 51a:	4a c0       	rjmp	.+148    	; 0x5b0 <DIO_write+0x114>
 51c:	48 b3       	in	r20, 0x18	; 24
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	b9 01       	movw	r22, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0x8e>
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0x8a>
 52e:	cb 01       	movw	r24, r22
 530:	84 2b       	or	r24, r20
 532:	88 bb       	out	0x18, r24	; 24
 534:	08 95       	ret
 536:	41 11       	cpse	r20, r1
 538:	0e c0       	rjmp	.+28     	; 0x556 <DIO_write+0xba>
 53a:	45 b3       	in	r20, 0x15	; 21
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_write+0xac>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_write+0xa8>
 54c:	cb 01       	movw	r24, r22
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	85 bb       	out	0x15, r24	; 21
 554:	08 95       	ret
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	59 f5       	brne	.+86     	; 0x5b0 <DIO_write+0x114>
 55a:	45 b3       	in	r20, 0x15	; 21
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0xcc>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0xc8>
 56c:	cb 01       	movw	r24, r22
 56e:	84 2b       	or	r24, r20
 570:	85 bb       	out	0x15, r24	; 21
 572:	08 95       	ret
 574:	41 11       	cpse	r20, r1
 576:	0e c0       	rjmp	.+28     	; 0x594 <DIO_write+0xf8>
 578:	42 b3       	in	r20, 0x12	; 18
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	b9 01       	movw	r22, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_write+0xea>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_write+0xe6>
 58a:	cb 01       	movw	r24, r22
 58c:	80 95       	com	r24
 58e:	84 23       	and	r24, r20
 590:	82 bb       	out	0x12, r24	; 18
 592:	08 95       	ret
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	61 f4       	brne	.+24     	; 0x5b0 <DIO_write+0x114>
 598:	42 b3       	in	r20, 0x12	; 18
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_write+0x10a>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	8a 95       	dec	r24
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_write+0x106>
 5aa:	cb 01       	movw	r24, r22
 5ac:	84 2b       	or	r24, r20
 5ae:	82 bb       	out	0x12, r24	; 18
 5b0:	08 95       	ret

000005b2 <DIO_read>:
 5b2:	62 34       	cpi	r22, 0x42	; 66
 5b4:	09 f1       	breq	.+66     	; 0x5f8 <DIO_read+0x46>
 5b6:	18 f4       	brcc	.+6      	; 0x5be <DIO_read+0xc>
 5b8:	61 34       	cpi	r22, 0x41	; 65
 5ba:	39 f0       	breq	.+14     	; 0x5ca <DIO_read+0x18>
 5bc:	08 95       	ret
 5be:	63 34       	cpi	r22, 0x43	; 67
 5c0:	91 f1       	breq	.+100    	; 0x626 <DIO_read+0x74>
 5c2:	64 34       	cpi	r22, 0x44	; 68
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <DIO_read+0x16>
 5c6:	46 c0       	rjmp	.+140    	; 0x654 <DIO_read+0xa2>
 5c8:	08 95       	ret
 5ca:	99 b3       	in	r25, 0x19	; 25
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	b9 01       	movw	r22, r18
 5d2:	08 2e       	mov	r0, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_read+0x28>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_read+0x24>
 5de:	29 2f       	mov	r18, r25
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	26 23       	and	r18, r22
 5e4:	37 23       	and	r19, r23
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_read+0x3c>
 5ea:	75 95       	asr	r23
 5ec:	67 95       	ror	r22
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_read+0x38>
 5f2:	fa 01       	movw	r30, r20
 5f4:	60 83       	st	Z, r22
 5f6:	08 95       	ret
 5f8:	96 b3       	in	r25, 0x16	; 22
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	08 2e       	mov	r0, r24
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_read+0x56>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_read+0x52>
 60c:	29 2f       	mov	r18, r25
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	26 23       	and	r18, r22
 612:	37 23       	and	r19, r23
 614:	b9 01       	movw	r22, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_read+0x6a>
 618:	75 95       	asr	r23
 61a:	67 95       	ror	r22
 61c:	8a 95       	dec	r24
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_read+0x66>
 620:	fa 01       	movw	r30, r20
 622:	60 83       	st	Z, r22
 624:	08 95       	ret
 626:	93 b3       	in	r25, 0x13	; 19
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	08 2e       	mov	r0, r24
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_read+0x84>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	0a 94       	dec	r0
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_read+0x80>
 63a:	29 2f       	mov	r18, r25
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	26 23       	and	r18, r22
 640:	37 23       	and	r19, r23
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_read+0x98>
 646:	75 95       	asr	r23
 648:	67 95       	ror	r22
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_read+0x94>
 64e:	fa 01       	movw	r30, r20
 650:	60 83       	st	Z, r22
 652:	08 95       	ret
 654:	90 b3       	in	r25, 0x10	; 16
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	b9 01       	movw	r22, r18
 65c:	08 2e       	mov	r0, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_read+0xb2>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_read+0xae>
 668:	29 2f       	mov	r18, r25
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	26 23       	and	r18, r22
 66e:	37 23       	and	r19, r23
 670:	b9 01       	movw	r22, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_read+0xc6>
 674:	75 95       	asr	r23
 676:	67 95       	ror	r22
 678:	8a 95       	dec	r24
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_read+0xc2>
 67c:	fa 01       	movw	r30, r20
 67e:	60 83       	st	Z, r22
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
