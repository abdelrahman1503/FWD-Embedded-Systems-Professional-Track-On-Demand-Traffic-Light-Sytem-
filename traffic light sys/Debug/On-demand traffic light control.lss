
On-demand traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000698  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000070c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e54  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ab  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  00001e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ba  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6f  00000000  00000000  00002d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000037e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  74:	0c 94 4a 03 	jmp	0x694	; 0x694 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
#include "app.h"
#include <avr/interrupt.h>
void APP_init(void)
{
	//initializing pin 2 in port D to input
	BUTTON_init(2, 'D');
  7c:	64 e4       	ldi	r22, 0x44	; 68
  7e:	70 e0       	ldi	r23, 0x00	; 0
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BUTTON_init>
	//initializing all pin 0,1,2 in port A, port B to output
	LED_init(0, 'A');
  88:	61 e4       	ldi	r22, 0x41	; 65
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
	LED_init(1, 'A');
  90:	61 e4       	ldi	r22, 0x41	; 65
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
	LED_init(2, 'A');
  98:	61 e4       	ldi	r22, 0x41	; 65
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
	LED_init(0, 'B');
  a0:	62 e4       	ldi	r22, 0x42	; 66
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
	LED_init(1, 'B');
  a8:	62 e4       	ldi	r22, 0x42	; 66
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
	LED_init(2, 'B');
  b0:	62 e4       	ldi	r22, 0x42	; 66
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 01 01 	call	0x202	; 0x202 <LED_init>
  b8:	08 95       	ret

000000ba <APP_start>:
{
	//Two variables used as counters for timer
	unsigned int overflow = 0;
	unsigned int counter = 0;
	//enable global interrupt
	sei();
  ba:	78 94       	sei
	// set interrupt sense to raising edge
	MCUCR |= (1<<ISC00) | (1<<ISC01);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	85 bf       	out	0x35, r24	; 53
	//enable external interrupt
	GICR |= (1<<INT0);
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8b bf       	out	0x3b, r24	; 59
	TCCR0 = 0x00; //Normal Mode
  c8:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; //set initial value to 0
  ca:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<0); //no prescalar
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	83 bf       	out	0x33, r24	; 51
	while (1)
	{
		//Cars red led and pedestrian green led are initially on
		LED_on('A', 0);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 08 01 	call	0x210	; 0x210 <LED_on>
		LED_on('B', 2);
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 08 01 	call	0x210	; 0x210 <LED_on>
		//Using the timer to delay 5 seconds
		while (overflow < 19532)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <APP_start+0x3e>
		{
			while ((TIFR & (1<<0)) == 0);
  e8:	08 b6       	in	r0, 0x38	; 56
  ea:	00 fe       	sbrs	r0, 0
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <APP_start+0x2e>
			TIFR |= (1<<0);
  ee:	88 b7       	in	r24, 0x38	; 56
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	88 bf       	out	0x38, r24	; 56
			overflow++;
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		//Cars red led and pedestrian green led are initially on
		LED_on('A', 0);
		LED_on('B', 2);
		//Using the timer to delay 5 seconds
		while (overflow < 19532)
  f8:	2c 34       	cpi	r18, 0x4C	; 76
  fa:	8c e4       	ldi	r24, 0x4C	; 76
  fc:	38 07       	cpc	r19, r24
  fe:	a0 f3       	brcs	.-24     	; 0xe8 <APP_start+0x2e>
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter to 0
		overflow = 0;
		TCNT0 = 0x00;
 100:	12 be       	out	0x32, r1	; 50
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		LED_off('B', 2);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
			while ((TIFR & (1<<0)) == 0);
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter to 0
		overflow = 0;
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0 = 0x00;
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
		LED_off('B', 2);
		//Blinking the yellow leds for both
		while (overflow < 20)
 116:	19 c0       	rjmp	.+50     	; 0x14a <APP_start+0x90>
		{	
				
				LED_toggle('A', 1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
				LED_toggle('B', 1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
			while (counter < 1000)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	08 c0       	rjmp	.+16     	; 0x13e <APP_start+0x84>
			{
				while ((TIFR & (1<<0)) == 0);
 12e:	08 b6       	in	r0, 0x38	; 56
 130:	00 fe       	sbrs	r0, 0
 132:	fd cf       	rjmp	.-6      	; 0x12e <APP_start+0x74>
				TIFR |= (1<<0);
 134:	88 b7       	in	r24, 0x38	; 56
 136:	81 60       	ori	r24, 0x01	; 1
 138:	88 bf       	out	0x38, r24	; 56
				counter++;
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
		while (overflow < 20)
		{	
				
				LED_toggle('A', 1);
				LED_toggle('B', 1);
			while (counter < 1000)
 13e:	28 3e       	cpi	r18, 0xE8	; 232
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	38 07       	cpc	r19, r24
 144:	a0 f3       	brcs	.-24     	; 0x12e <APP_start+0x74>
				while ((TIFR & (1<<0)) == 0);
				TIFR |= (1<<0);
				counter++;
			}
			counter = 0;
			TCNT0 = 0x00;
 146:	12 be       	out	0x32, r1	; 50
			overflow ++;
 148:	21 96       	adiw	r28, 0x01	; 1
		TCNT0 = 0x00;
		//Cars red led and pedestrian green led are off
		LED_off('A', 0);
		LED_off('B', 2);
		//Blinking the yellow leds for both
		while (overflow < 20)
 14a:	c4 31       	cpi	r28, 0x14	; 20
 14c:	d1 05       	cpc	r29, r1
 14e:	20 f3       	brcs	.-56     	; 0x118 <APP_start+0x5e>
			counter = 0;
			TCNT0 = 0x00;
			overflow ++;
		}
		overflow = 0;
		TCNT0 = 0x00;
 150:	12 be       	out	0x32, r1	; 50
		//The yellow leds are off
		LED_off('A', 1);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		LED_off('B', 1);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 08 01 	call	0x210	; 0x210 <LED_on>
		LED_on('B', 0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 08 01 	call	0x210	; 0x210 <LED_on>
			}
			counter = 0;
			TCNT0 = 0x00;
			overflow ++;
		}
		overflow = 0;
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
		LED_off('B', 1);
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
		LED_on('B', 0);
		//timer to delay by 5 seconds
		while (overflow < 19532)
 176:	08 c0       	rjmp	.+16     	; 0x188 <APP_start+0xce>
		{
			while ((TIFR & (1<<0)) == 0);
 178:	08 b6       	in	r0, 0x38	; 56
 17a:	00 fe       	sbrs	r0, 0
 17c:	fd cf       	rjmp	.-6      	; 0x178 <APP_start+0xbe>
			TIFR |= (1<<0);
 17e:	88 b7       	in	r24, 0x38	; 56
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bf       	out	0x38, r24	; 56
			overflow++;
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	3f 4f       	sbci	r19, 0xFF	; 255
		LED_off('B', 1);
		//Cars green led and pedestrian red led are on
		LED_on('A', 2);
		LED_on('B', 0);
		//timer to delay by 5 seconds
		while (overflow < 19532)
 188:	2c 34       	cpi	r18, 0x4C	; 76
 18a:	8c e4       	ldi	r24, 0x4C	; 76
 18c:	38 07       	cpc	r19, r24
 18e:	a0 f3       	brcs	.-24     	; 0x178 <APP_start+0xbe>
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter and timer
		overflow = 0;
		TCNT0 = 0x00;
 190:	12 be       	out	0x32, r1	; 50
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		LED_off('B', 0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
			while ((TIFR & (1<<0)) == 0);
			TIFR |= (1<<0);
			overflow++;
		}
		//reseting the counter and timer
		overflow = 0;
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0 = 0x00;
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
		LED_off('B', 0);
		//Blinking the yellow leds for 5 seconds
		while (overflow < 20)
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <APP_start+0x120>
		{
			
			LED_toggle('A', 1);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
			LED_toggle('B', 1);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	82 e4       	ldi	r24, 0x42	; 66
 1b4:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
			while (counter < 1000)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <APP_start+0x114>
			{
				while ((TIFR & (1<<0)) == 0);
 1be:	08 b6       	in	r0, 0x38	; 56
 1c0:	00 fe       	sbrs	r0, 0
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <APP_start+0x104>
				TIFR |= (1<<0);
 1c4:	88 b7       	in	r24, 0x38	; 56
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	88 bf       	out	0x38, r24	; 56
				counter++;
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
		while (overflow < 20)
		{
			
			LED_toggle('A', 1);
			LED_toggle('B', 1);
			while (counter < 1000)
 1ce:	28 3e       	cpi	r18, 0xE8	; 232
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	38 07       	cpc	r19, r24
 1d4:	a0 f3       	brcs	.-24     	; 0x1be <APP_start+0x104>
				while ((TIFR & (1<<0)) == 0);
				TIFR |= (1<<0);
				counter++;
			}
			counter = 0;
			TCNT0 = 0x00;
 1d6:	12 be       	out	0x32, r1	; 50
			overflow ++;
 1d8:	21 96       	adiw	r28, 0x01	; 1
		TCNT0 = 0x00;
		//Cars green led and pedestrian red led are off
		LED_off('A', 2);
		LED_off('B', 0);
		//Blinking the yellow leds for 5 seconds
		while (overflow < 20)
 1da:	c4 31       	cpi	r28, 0x14	; 20
 1dc:	d1 05       	cpc	r29, r1
 1de:	20 f3       	brcs	.-56     	; 0x1a8 <APP_start+0xee>
			TCNT0 = 0x00;
			overflow ++;
		}
		//reseting the counter and timer
		overflow = 0;
		TCNT0 = 0x00;
 1e0:	12 be       	out	0x32, r1	; 50
		//Both yellow leds are off
		LED_off('A', 1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		LED_off('B', 1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
		}
 1f2:	6f cf       	rjmp	.-290    	; 0xd2 <APP_start+0x18>

000001f4 <BUTTON_init>:
 *  Author: Abdelrahman Hesham
 */ 
#include "button.h"
// initialize
void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin) // Button is an input device
{
 1f4:	98 2f       	mov	r25, r24
 1f6:	86 2f       	mov	r24, r22
	DIO_init(buttonPin, buttonPort, IN);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	69 2f       	mov	r22, r25
 1fc:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
 200:	08 95       	ret

00000202 <LED_init>:
 202:	98 2f       	mov	r25, r24
 204:	86 2f       	mov	r24, r22
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	69 2f       	mov	r22, r25
 20a:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
 20e:	08 95       	ret

00000210 <LED_on>:
 210:	98 2f       	mov	r25, r24
 212:	86 2f       	mov	r24, r22
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	69 2f       	mov	r22, r25
 218:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_write>
 21c:	08 95       	ret

0000021e <LED_off>:
 21e:	98 2f       	mov	r25, r24
 220:	86 2f       	mov	r24, r22
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	69 2f       	mov	r22, r25
 226:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_write>
 22a:	08 95       	ret

0000022c <LED_toggle>:
 22c:	98 2f       	mov	r25, r24
 22e:	86 2f       	mov	r24, r22
 230:	69 2f       	mov	r22, r25
 232:	0e 94 18 02 	call	0x430	; 0x430 <DIO_toggle>
 236:	08 95       	ret

00000238 <main>:
 238:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
 23c:	0e 94 5d 00 	call	0xba	; 0xba <APP_start>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret

00000246 <__vector_1>:
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
 26c:	40 e6       	ldi	r20, 0x60	; 96
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	61 e4       	ldi	r22, 0x41	; 65
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_read>
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	91 05       	cpc	r25, r1
 284:	91 f1       	breq	.+100    	; 0x2ea <__vector_1+0xa4>
 286:	89 2b       	or	r24, r25
 288:	81 f5       	brne	.+96     	; 0x2ea <__vector_1+0xa4>
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	82 e4       	ldi	r24, 0x42	; 66
 2a6:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_off>
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	19 c0       	rjmp	.+50     	; 0x2e2 <__vector_1+0x9c>
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	82 e4       	ldi	r24, 0x42	; 66
 2bc:	0e 94 16 01 	call	0x22c	; 0x22c <LED_toggle>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <__vector_1+0x90>
 2c6:	08 b6       	in	r0, 0x38	; 56
 2c8:	00 fe       	sbrs	r0, 0
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <__vector_1+0x80>
 2cc:	88 b7       	in	r24, 0x38	; 56
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	88 bf       	out	0x38, r24	; 56
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	28 3e       	cpi	r18, 0xE8	; 232
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	38 07       	cpc	r19, r24
 2dc:	a4 f3       	brlt	.-24     	; 0x2c6 <__vector_1+0x80>
 2de:	12 be       	out	0x32, r1	; 50
 2e0:	21 96       	adiw	r28, 0x01	; 1
 2e2:	c4 31       	cpi	r28, 0x14	; 20
 2e4:	d1 05       	cpc	r29, r1
 2e6:	24 f3       	brlt	.-56     	; 0x2b0 <__vector_1+0x6a>
 2e8:	12 be       	out	0x32, r1	; 50
 2ea:	8b b7       	in	r24, 0x3b	; 59
 2ec:	8f 7b       	andi	r24, 0xBF	; 191
 2ee:	8b bf       	out	0x3b, r24	; 59
 2f0:	0e 94 5d 00 	call	0xba	; 0xba <APP_start>
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <DIO_init>:
//global variables
// function definition
//Initializing the pin state to input or output
void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
 31a:	62 34       	cpi	r22, 0x42	; 66
 31c:	59 f1       	breq	.+86     	; 0x374 <DIO_init+0x5a>
 31e:	18 f4       	brcc	.+6      	; 0x326 <DIO_init+0xc>
 320:	61 34       	cpi	r22, 0x41	; 65
 322:	41 f0       	breq	.+16     	; 0x334 <DIO_init+0x1a>
 324:	08 95       	ret
 326:	63 34       	cpi	r22, 0x43	; 67
 328:	09 f4       	brne	.+2      	; 0x32c <DIO_init+0x12>
 32a:	44 c0       	rjmp	.+136    	; 0x3b4 <DIO_init+0x9a>
 32c:	64 34       	cpi	r22, 0x44	; 68
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_init+0x18>
 330:	60 c0       	rjmp	.+192    	; 0x3f2 <DIO_init+0xd8>
 332:	08 95       	ret
{
	case PORT_A:
	if(direction == IN)
 334:	41 11       	cpse	r20, r1
 336:	0e c0       	rjmp	.+28     	; 0x354 <DIO_init+0x3a>
	{
		DDRA &= ~(1 << pinNumber);
 338:	4a b3       	in	r20, 0x1a	; 26
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_init+0x2c>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_init+0x28>
 34a:	cb 01       	movw	r24, r22
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8a bb       	out	0x1a, r24	; 26
 352:	08 95       	ret
	}
	else if (direction == OUT)
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_init+0x40>
 358:	6a c0       	rjmp	.+212    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
			DDRA |= (1 << pinNumber);// Output
 35a:	4a b3       	in	r20, 0x1a	; 26
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_init+0x4e>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_init+0x4a>
 36c:	cb 01       	movw	r24, r22
 36e:	84 2b       	or	r24, r20
 370:	8a bb       	out	0x1a, r24	; 26
 372:	08 95       	ret
	}
	break;
	case PORT_B:
   if(direction == IN)
 374:	41 11       	cpse	r20, r1
 376:	0e c0       	rjmp	.+28     	; 0x394 <DIO_init+0x7a>
    {
	DDRB &= ~(1 << pinNumber);
 378:	47 b3       	in	r20, 0x17	; 23
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_init+0x6c>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_init+0x68>
 38a:	cb 01       	movw	r24, r22
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
	}
	else if (direction == OUT)
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	09 f0       	breq	.+2      	; 0x39a <DIO_init+0x80>
 398:	4a c0       	rjmp	.+148    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
	DDRB |= (1 << pinNumber);// Output
 39a:	47 b3       	in	r20, 0x17	; 23
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_init+0x8e>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_init+0x8a>
 3ac:	cb 01       	movw	r24, r22
 3ae:	84 2b       	or	r24, r20
 3b0:	87 bb       	out	0x17, r24	; 23
 3b2:	08 95       	ret
	}
	break;
	case PORT_C:
	if(direction == IN)
 3b4:	41 11       	cpse	r20, r1
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <DIO_init+0xba>
	{
		DDRC &= ~(1 << pinNumber);
 3b8:	44 b3       	in	r20, 0x14	; 20
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0xac>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0xa8>
 3ca:	cb 01       	movw	r24, r22
 3cc:	80 95       	com	r24
 3ce:	84 23       	and	r24, r20
 3d0:	84 bb       	out	0x14, r24	; 20
 3d2:	08 95       	ret
	}
	else if (direction == OUT)
 3d4:	41 30       	cpi	r20, 0x01	; 1
 3d6:	59 f5       	brne	.+86     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		DDRC |= (1 << pinNumber);// Output
 3d8:	44 b3       	in	r20, 0x14	; 20
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_init+0xcc>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_init+0xc8>
 3ea:	cb 01       	movw	r24, r22
 3ec:	84 2b       	or	r24, r20
 3ee:	84 bb       	out	0x14, r24	; 20
 3f0:	08 95       	ret
	}
	break;
	case PORT_D:
	if(direction == IN)
 3f2:	41 11       	cpse	r20, r1
 3f4:	0e c0       	rjmp	.+28     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		DDRD &= ~(1 << pinNumber);
 3f6:	41 b3       	in	r20, 0x11	; 17
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	81 bb       	out	0x11, r24	; 17
 410:	08 95       	ret
	}
	else if (direction == OUT)
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	61 f4       	brne	.+24     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		DDRD |= (1 << pinNumber);// Output
 416:	41 b3       	in	r20, 0x11	; 17
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	cb 01       	movw	r24, r22
 42a:	84 2b       	or	r24, r20
 42c:	81 bb       	out	0x11, r24	; 17
 42e:	08 95       	ret

00000430 <DIO_toggle>:
	break;
}
}
//toggling the pin used for led toggle
void DIO_toggle(uint8_t pinNumber, uint8_t portNumber){
	switch(portNumber)
 430:	62 34       	cpi	r22, 0x42	; 66
 432:	b1 f0       	breq	.+44     	; 0x460 <DIO_toggle+0x30>
 434:	18 f4       	brcc	.+6      	; 0x43c <DIO_toggle+0xc>
 436:	61 34       	cpi	r22, 0x41	; 65
 438:	31 f0       	breq	.+12     	; 0x446 <DIO_toggle+0x16>
 43a:	08 95       	ret
 43c:	63 34       	cpi	r22, 0x43	; 67
 43e:	e9 f0       	breq	.+58     	; 0x47a <DIO_toggle+0x4a>
 440:	64 34       	cpi	r22, 0x44	; 68
 442:	41 f1       	breq	.+80     	; 0x494 <DIO_toggle+0x64>
 444:	08 95       	ret
	{
		case PORT_A:
			PORTA ^=(1 << pinNumber); //toggle
 446:	4b b3       	in	r20, 0x1b	; 27
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_toggle+0x24>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_toggle+0x20>
 458:	cb 01       	movw	r24, r22
 45a:	84 27       	eor	r24, r20
 45c:	8b bb       	out	0x1b, r24	; 27
			
			break;
 45e:	08 95       	ret
		case PORT_B:
			PORTB ^=(1 << pinNumber); //toggle
 460:	48 b3       	in	r20, 0x18	; 24
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_toggle+0x3e>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_toggle+0x3a>
 472:	cb 01       	movw	r24, r22
 474:	84 27       	eor	r24, r20
 476:	88 bb       	out	0x18, r24	; 24
			
			break;
 478:	08 95       	ret
		case PORT_C:
			PORTC ^=(1 << pinNumber); //toggle
 47a:	45 b3       	in	r20, 0x15	; 21
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_toggle+0x58>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_toggle+0x54>
 48c:	cb 01       	movw	r24, r22
 48e:	84 27       	eor	r24, r20
 490:	85 bb       	out	0x15, r24	; 21
			
			break;
 492:	08 95       	ret
		case PORT_D:
			PORTD ^=(1 << pinNumber); //toggle
 494:	42 b3       	in	r20, 0x12	; 18
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_toggle+0x72>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_toggle+0x6e>
 4a6:	cb 01       	movw	r24, r22
 4a8:	84 27       	eor	r24, r20
 4aa:	82 bb       	out	0x12, r24	; 18
 4ac:	08 95       	ret

000004ae <DIO_write>:
}


//write high or low on the pin
void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value){
switch(portNumber)
 4ae:	62 34       	cpi	r22, 0x42	; 66
 4b0:	59 f1       	breq	.+86     	; 0x508 <DIO_write+0x5a>
 4b2:	18 f4       	brcc	.+6      	; 0x4ba <DIO_write+0xc>
 4b4:	61 34       	cpi	r22, 0x41	; 65
 4b6:	41 f0       	breq	.+16     	; 0x4c8 <DIO_write+0x1a>
 4b8:	08 95       	ret
 4ba:	63 34       	cpi	r22, 0x43	; 67
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <DIO_write+0x12>
 4be:	44 c0       	rjmp	.+136    	; 0x548 <DIO_write+0x9a>
 4c0:	64 34       	cpi	r22, 0x44	; 68
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <DIO_write+0x18>
 4c4:	60 c0       	rjmp	.+192    	; 0x586 <DIO_write+0xd8>
 4c6:	08 95       	ret
{
	case PORT_A:
	if(value == LOW)
 4c8:	41 11       	cpse	r20, r1
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <DIO_write+0x3a>
	{
		PORTA &=~(1 << pinNumber); // write 0
 4cc:	4b b3       	in	r20, 0x1b	; 27
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_write+0x2c>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_write+0x28>
 4de:	cb 01       	movw	r24, r22
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8b bb       	out	0x1b, r24	; 27
 4e6:	08 95       	ret
	}
	else if(value == HIGH)
 4e8:	41 30       	cpi	r20, 0x01	; 1
 4ea:	09 f0       	breq	.+2      	; 0x4ee <DIO_write+0x40>
 4ec:	6a c0       	rjmp	.+212    	; 0x5c2 <DIO_write+0x114>
	{
		PORTA |= (1 << pinNumber); // write 1
 4ee:	4b b3       	in	r20, 0x1b	; 27
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_write+0x4e>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_write+0x4a>
 500:	cb 01       	movw	r24, r22
 502:	84 2b       	or	r24, r20
 504:	8b bb       	out	0x1b, r24	; 27
 506:	08 95       	ret
	}
	break;
	case PORT_B:
	if(value == LOW)
 508:	41 11       	cpse	r20, r1
 50a:	0e c0       	rjmp	.+28     	; 0x528 <DIO_write+0x7a>
	{
		PORTB &=~(1 << pinNumber); // write 0
 50c:	48 b3       	in	r20, 0x18	; 24
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0x6c>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0x68>
 51e:	cb 01       	movw	r24, r22
 520:	80 95       	com	r24
 522:	84 23       	and	r24, r20
 524:	88 bb       	out	0x18, r24	; 24
 526:	08 95       	ret
	}
	else if(value == HIGH)
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	09 f0       	breq	.+2      	; 0x52e <DIO_write+0x80>
 52c:	4a c0       	rjmp	.+148    	; 0x5c2 <DIO_write+0x114>
	{
		PORTB |= (1 << pinNumber); // write 1
 52e:	48 b3       	in	r20, 0x18	; 24
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	b9 01       	movw	r22, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0x8e>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0x8a>
 540:	cb 01       	movw	r24, r22
 542:	84 2b       	or	r24, r20
 544:	88 bb       	out	0x18, r24	; 24
 546:	08 95       	ret
	}
	break;
	case PORT_C:
	if(value == LOW)
 548:	41 11       	cpse	r20, r1
 54a:	0e c0       	rjmp	.+28     	; 0x568 <DIO_write+0xba>
	{
		PORTC &=~(1 << pinNumber); // write 0
 54c:	45 b3       	in	r20, 0x15	; 21
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	b9 01       	movw	r22, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_write+0xac>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	8a 95       	dec	r24
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_write+0xa8>
 55e:	cb 01       	movw	r24, r22
 560:	80 95       	com	r24
 562:	84 23       	and	r24, r20
 564:	85 bb       	out	0x15, r24	; 21
 566:	08 95       	ret
	}
	else if(value == HIGH)
 568:	41 30       	cpi	r20, 0x01	; 1
 56a:	59 f5       	brne	.+86     	; 0x5c2 <DIO_write+0x114>
	{
		PORTC |= (1 << pinNumber); // write 1
 56c:	45 b3       	in	r20, 0x15	; 21
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_write+0xcc>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	8a 95       	dec	r24
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_write+0xc8>
 57e:	cb 01       	movw	r24, r22
 580:	84 2b       	or	r24, r20
 582:	85 bb       	out	0x15, r24	; 21
 584:	08 95       	ret
	}
	break;
	case PORT_D:
	if(value == LOW)
 586:	41 11       	cpse	r20, r1
 588:	0e c0       	rjmp	.+28     	; 0x5a6 <DIO_write+0xf8>
	{
		PORTD &=~(1 << pinNumber); // write 0
 58a:	42 b3       	in	r20, 0x12	; 18
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_write+0xea>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_write+0xe6>
 59c:	cb 01       	movw	r24, r22
 59e:	80 95       	com	r24
 5a0:	84 23       	and	r24, r20
 5a2:	82 bb       	out	0x12, r24	; 18
 5a4:	08 95       	ret
	}
	else if(value == HIGH)
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	61 f4       	brne	.+24     	; 0x5c2 <DIO_write+0x114>
	{
		PORTD |= (1 << pinNumber); // write 1
 5aa:	42 b3       	in	r20, 0x12	; 18
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_write+0x10a>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_write+0x106>
 5bc:	cb 01       	movw	r24, r22
 5be:	84 2b       	or	r24, r20
 5c0:	82 bb       	out	0x12, r24	; 18
 5c2:	08 95       	ret

000005c4 <DIO_read>:
}
}
//reading the pin state
void DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
	switch (portNumber)
 5c4:	62 34       	cpi	r22, 0x42	; 66
 5c6:	09 f1       	breq	.+66     	; 0x60a <DIO_read+0x46>
 5c8:	18 f4       	brcc	.+6      	; 0x5d0 <DIO_read+0xc>
 5ca:	61 34       	cpi	r22, 0x41	; 65
 5cc:	39 f0       	breq	.+14     	; 0x5dc <DIO_read+0x18>
 5ce:	08 95       	ret
 5d0:	63 34       	cpi	r22, 0x43	; 67
 5d2:	91 f1       	breq	.+100    	; 0x638 <DIO_read+0x74>
 5d4:	64 34       	cpi	r22, 0x44	; 68
 5d6:	09 f4       	brne	.+2      	; 0x5da <DIO_read+0x16>
 5d8:	46 c0       	rjmp	.+140    	; 0x666 <DIO_read+0xa2>
 5da:	08 95       	ret
	{
		case PORT_A:
		*value= (PINA & (1 << pinNumber))>> pinNumber; // get state-> read bit
 5dc:	99 b3       	in	r25, 0x19	; 25
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	b9 01       	movw	r22, r18
 5e4:	08 2e       	mov	r0, r24
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_read+0x28>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	0a 94       	dec	r0
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_read+0x24>
 5f0:	29 2f       	mov	r18, r25
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	26 23       	and	r18, r22
 5f6:	37 23       	and	r19, r23
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_read+0x3c>
 5fc:	75 95       	asr	r23
 5fe:	67 95       	ror	r22
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_read+0x38>
 604:	fa 01       	movw	r30, r20
 606:	60 83       	st	Z, r22
		break;
 608:	08 95       	ret
		case PORT_B:
		*value= (PINB & (1 << pinNumber))>> pinNumber; // get state-> read bit
 60a:	96 b3       	in	r25, 0x16	; 22
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	b9 01       	movw	r22, r18
 612:	08 2e       	mov	r0, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_read+0x56>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_read+0x52>
 61e:	29 2f       	mov	r18, r25
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	26 23       	and	r18, r22
 624:	37 23       	and	r19, r23
 626:	b9 01       	movw	r22, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_read+0x6a>
 62a:	75 95       	asr	r23
 62c:	67 95       	ror	r22
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_read+0x66>
 632:	fa 01       	movw	r30, r20
 634:	60 83       	st	Z, r22
		break;
 636:	08 95       	ret
		case PORT_C:
		*value=(PINC & (1 << pinNumber))>> pinNumber; // get state-> read bit
 638:	93 b3       	in	r25, 0x13	; 19
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	b9 01       	movw	r22, r18
 640:	08 2e       	mov	r0, r24
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_read+0x84>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_read+0x80>
 64c:	29 2f       	mov	r18, r25
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	26 23       	and	r18, r22
 652:	37 23       	and	r19, r23
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_read+0x98>
 658:	75 95       	asr	r23
 65a:	67 95       	ror	r22
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_read+0x94>
 660:	fa 01       	movw	r30, r20
 662:	60 83       	st	Z, r22
		break;
 664:	08 95       	ret
		case PORT_D:
		*value=(PIND & (1 << pinNumber))>> pinNumber; // get state -> read bit 0 or 1
 666:	90 b3       	in	r25, 0x10	; 16
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	08 2e       	mov	r0, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_read+0xb2>
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_read+0xae>
 67a:	29 2f       	mov	r18, r25
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	26 23       	and	r18, r22
 680:	37 23       	and	r19, r23
 682:	b9 01       	movw	r22, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_read+0xc6>
 686:	75 95       	asr	r23
 688:	67 95       	ror	r22
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_read+0xc2>
 68e:	fa 01       	movw	r30, r20
 690:	60 83       	st	Z, r22
 692:	08 95       	ret

00000694 <_exit>:
 694:	f8 94       	cli

00000696 <__stop_program>:
 696:	ff cf       	rjmp	.-2      	; 0x696 <__stop_program>
